const fs = require('fs');
const constants = require('./constants.js');

// Some constants for this file.
const serviceName = 'ResourceRequestService';
const entityName = 'ResourceRequests';

// File Names
const jsonSourceFileName = `docs/${serviceName}.openapi3.json`;
const jsonTargetFileName = `docs/${serviceName}.json`;
const xmlSourceFileName = `docs/${serviceName}.xml`;
const xmltargetFileName = `docs/${serviceName}.edmx`;

// Schema Names
const schema = `${serviceName}.${entityName}`;
const createPayloadSchema = `${serviceName}.${entityName}-create`;
const updatePayloadSchema = `${serviceName}.${entityName}-update`;

// Read file generated by CAP.
let openAPISpec = JSON.parse(fs.readFileSync(jsonSourceFileName,'utf-8'));

// Add missing info required for API hub.
modifyForAPIHub();

// Mark mandatory fields and non nullable fields
markMandatoryProperty();

// Add details for required effort.
addDetailsForRequiredEffort();

// Set 4xx specific error response
add4xxComponents();

// Remove generic 4XX message and add specefic messages.
deleteGenericAndAddSpecefic4XXResponse();

// Fix tags
fixTag();

//add schema descriptions
addSchemaDescriptions();

//add API Reference descriptions
modifyAPIRefObjectsDescription();

// Convert json to string to write back in file.
let stringData = JSON.stringify(openAPISpec, null, 2);

// Write modified data back to json file
fs.writeFileSync(jsonSourceFileName, stringData);
// remove .openapi3 from generated file
fs.renameSync(jsonSourceFileName, jsonTargetFileName);
// Convert .xml to .edmx file
fs.renameSync(xmlSourceFileName,xmltargetFileName);

function modifyForAPIHub(){
    openAPISpec['x-sap-shortText'] = 'Manage resource requests.';
    openAPISpec['x-sap-api-type'] = 'ODATAV4';
    openAPISpec.info.version = '1.0';

    //set the sandox and production server details
    openAPISpec.servers = constants.servers;

    //Set security schemes inside component
    openAPISpec.components['securitySchemes'] = constants.securitySchemes;
}

function markMandatoryProperty(){
    // Set mandatory fields in schema.
    openAPISpec.components.schemas[createPayloadSchema].required = constants.mandatoryFields;
    openAPISpec.components.schemas["ResourceRequestService.ReferenceObjects-create"].required = constants.refObjMandatoryFields;
    // Mark individual fields as nullable false.
    constants.mandatoryFields.forEach((property) => {
        openAPISpec.components.schemas[createPayloadSchema].properties[property].nullable = false;
    });

    openAPISpec.components.schemas["ResourceRequestService.ReferenceObjects-create"].properties["displayId"].nullable = false;
    openAPISpec.components.schemas["ResourceRequestService.ReferenceObjects-create"].properties["typeCode"].nullable = false;
}

function add4xxComponents(){
    Object.keys(constants.error_4xx).forEach((errorResponse) => {
        openAPISpec.components.responses[errorResponse] = constants.error_4xx[errorResponse];
    });
}

function addDetailsForRequiredEffort(){
    const property = 'requiredEffort';
    [schema, createPayloadSchema, updatePayloadSchema].forEach((schemaDefinition)=>{
        delete openAPISpec.components.schemas[schemaDefinition].properties[property].anyOf;
        openAPISpec.components.schemas[schemaDefinition].properties[property].type = 'number';
        openAPISpec.components.schemas[schemaDefinition].properties[property].minimum = 1.00;
    });
}

function deleteGenericAndAddSpecefic4XXResponse(){
    Object.keys(constants.responseStructure).forEach((path) => {
        Object.keys(constants.responseStructure[path]).forEach((httpMethod)=>{
            delete openAPISpec.paths[path][httpMethod].responses['4XX'];
            constants.responseStructure[path][httpMethod].forEach((errorCode)=>{
                openAPISpec.paths[path][httpMethod].responses[errorCode] = constants.errorResponse[errorCode];
            });
        });
    });
}

function fixTag(){
    const tag = ['Resource Requests', 'Reference Objects'];
    openAPISpec.tags[0].name = tag[0];
    openAPISpec.tags[1].name = tag[1];
    openAPISpec.paths['/ResourceRequests'].get.tags = [tag[0]];
    openAPISpec.paths['/ResourceRequests'].post.tags = [tag[0]];
    openAPISpec.paths['/ResourceRequests({ID})'].get.tags = [tag[0]];
    openAPISpec.paths['/ResourceRequests({ID})'].patch.tags = [tag[0]];
    openAPISpec.paths['/ResourceRequests({ID})'].delete.tags = [tag[0]];
    openAPISpec.paths['/ReferenceObjects'].get.tags = [tag[1]];
    openAPISpec.paths['/ReferenceObjects'].post.tags = [tag[1]];
    openAPISpec.paths['/ReferenceObjects({ID})'].get.tags = [tag[1]];
    openAPISpec.paths['/ReferenceObjects({ID})'].patch.tags = [tag[1]];
    openAPISpec.paths['/ReferenceObjects({ID})'].delete.tags = [tag[1]];
}

function addSchemaDescriptions() {
    openAPISpec.components.schemas["ResourceRequestService.ReferenceObjects-create"].description = "Creates a reference object.";
    openAPISpec.components.schemas["ResourceRequestService.ReferenceObjects"].description = "Reads all reference objects.";
    openAPISpec.components.schemas["ResourceRequestService.ReferenceObjects-update"].description= "Updates details of a reference object ID."
}

function modifyAPIRefObjectsDescription() {
    openAPISpec.paths["/ReferenceObjects"].post.description = "Creates reference objects in SAP S/4HANA Cloud for projects, resource management.";
    openAPISpec.paths["/ReferenceObjects({ID})"].get["description"] = "Read details of a reference object ID.";
    openAPISpec.paths["/ReferenceObjects"].get["description"] = "Reads reference objects that were created in SAP S/4HANA Cloud for projects, resource management.";
    openAPISpec.paths["/ReferenceObjects({ID})"].patch["description"] = "Update details of a reference object ID.";
    openAPISpec.paths["/ReferenceObjects({ID})"].delete["description"] = "Deletes a reference object.";

}
