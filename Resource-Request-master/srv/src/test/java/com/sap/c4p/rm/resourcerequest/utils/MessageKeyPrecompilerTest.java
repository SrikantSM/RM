package com.sap.c4p.rm.resourcerequest.utils;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import com.sap.c4p.rm.resourcerequest.exceptions.PrecompilationException;

public class MessageKeyPrecompilerTest {

  /** name and path to properties file containing i18n for testing */
  private static final String PROPERTIES_FILE = "src/test/resources/test_i18n.properties";

  @Test
  @DisplayName("check if readI18nKeys() returns keys as expected")
  public void readI18nKeysExistingFile() throws PrecompilationException {
    final List<String> keys = MessageKeyPrecompiler.readI18nKeys(Paths.get(MessageKeyPrecompilerTest.PROPERTIES_FILE));

    // assertEquals(2, keys.size());
    assertTrue(keys.contains("COLUMN_CONTENT_MISSING"),
        "'COLUMN_CONTENT_MISSING' not returned by readI18nKeys as expected");
    assertTrue(keys.contains("COLUMNS_MISSING"), "'COLUMNS_MISSING' not returned by readI18nKeys as expected");
  }

  @Test
  @DisplayName("check if readI18nKeys() throws exception in case file does not exist")
  public void readI18nKeyNonExistingFile() {
    assertThrows(PrecompilationException.class, () -> {
      MessageKeyPrecompiler.readI18nKeys(Paths.get("FileDoesNotExist"));
    });
  }

  @Test
  @DisplayName("check java code generated by generateMessageKeysClass()")
  public void generateMessageKeysClass() throws PrecompilationException {
    final String classCode = MessageKeyPrecompiler
        .generateMessageKeysClass(Paths.get(MessageKeyPrecompilerTest.PROPERTIES_FILE));

    assertTrue(classCode.contains("COLUMN_CONTENT_MISSING"),
        "'COLUMN_CONTENT_MISSING' not found in class generated by generateMessageKeysClass()");
    assertTrue(classCode.contains("COLUMNS_MISSING"),
        "'COLUMNS_MISSING' not found in class generated by generateMessageKeysClass()");
  }

  @Test
  @DisplayName("check if checkI18NFileExistence() succeeds in case provided path exists")
  public void checkI18NFileExistenceSuccess() {
    try {
      MessageKeyPrecompiler.checkI18NFileExistence(Paths.get(MessageKeyPrecompilerTest.PROPERTIES_FILE));
    } catch (final PrecompilationException e) {
      fail("checkI18NFileExistence() has thrown exception PrecompilationException unexpectedly");
    }
  }

  @Test
  @DisplayName("check if checkI18NFileExistence() throws exception in case path does not exist")
  public void checkI18NFileExistenceFail() {
    assertThrows(PrecompilationException.class, () -> {
      MessageKeyPrecompiler.checkI18NFileExistence(Paths.get("filenotexist"));
    });
  }

  @Test
  @DisplayName("check if ensureTargetPathExists() throws exception in case targetParentPath is null")
  public void ensureTargetPathExistsFailStage1() {
    assertThrows(PrecompilationException.class, () -> {
      MessageKeyPrecompiler.ensureTargetPathExists(Paths.get(MessageKeyPrecompilerTest.PROPERTIES_FILE), null);
    });
  }

  @Test
  @DisplayName("check if ensureTargetPathExists() throws exception in case targetParentPath cannot be created")
  public void ensureTargetPathExistsFailStage2() {

    final Path mockParentPath = mock(Path.class);
    final File mockFile = mock(File.class);
    when(mockParentPath.toFile()).thenReturn(mockFile);
    when(mockFile.exists()).thenReturn(false);
    when(mockFile.mkdirs()).thenReturn(false);

    assertThrows(PrecompilationException.class, () -> {
      MessageKeyPrecompiler.ensureTargetPathExists(Paths.get(MessageKeyPrecompilerTest.PROPERTIES_FILE),
          mockParentPath);
    });
  }

}