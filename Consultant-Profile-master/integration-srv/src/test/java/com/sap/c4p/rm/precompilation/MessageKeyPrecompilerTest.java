package com.sap.c4p.rm.precompilation;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import com.sap.c4p.rm.exceptions.PrecompilationException;

class MessageKeyPrecompilerTest {

    /** name and path to properties file containing i18n for testing */
    private static final String PROPERTIES_FILE = "src/integration-test/resources/test_i18n.properties";

    @Test
    @DisplayName("Check main method")
    void testMain() {
        assertDoesNotThrow(() -> MessageKeyPrecompiler.main(null));
    }

    @Test
    @DisplayName("check result of camelCaseToUnderscoreCaseIdentifier()")
    void camelCaseToUnderscoreCaseIdentifier() {
        final String input = "someExampleValue";
        final String identifier = "SOME_EXAMPLE_VALUE";

        assertEquals(identifier, MessageKeyPrecompiler.camelCaseToUnderscoreCaseIdentifier(input));
    }

    @Test
    @DisplayName("check result of camelCaseToUnderscoreCaseIdentifier() with an invalid start character")
    void camelCaseToUnderscoreCaseIdentifierWithAnInvalidStartCharacter() {
        final String input = "123";
        final String identifier = "_123";

        assertEquals(identifier, MessageKeyPrecompiler.camelCaseToUnderscoreCaseIdentifier(input));
    }

    @Test
    @DisplayName("check result of camelCaseToUnderscoreCaseIdentifier() with an character in its content")
    void camelCaseToUnderscoreCaseIdentifierWithAnInvalidCharacterInContent() {
        final String input = "a-b-c";
        final String identifier = "A_B_C";

        assertEquals(identifier, MessageKeyPrecompiler.camelCaseToUnderscoreCaseIdentifier(input));
    }

    @Test
    @DisplayName("check if readI18nKeys() returns keys as expected")
    void readI18nKeysExistingFile() throws PrecompilationException {
        final List<String> keys = MessageKeyPrecompiler
                .readI18nKeys(Paths.get(MessageKeyPrecompilerTest.PROPERTIES_FILE));

        assertEquals(2, keys.size());
        assertTrue(keys.contains("camelCaseTag"), "'camelCaseTag' not returned by readI18nKeys as expected");
        assertTrue(keys.contains("UPPERCASE_TAG"), "'UPPERCASE_TAG' not returned by readI18nKeys as expected");
    }

    @Test
    @DisplayName("check if readI18nKeys() throws exception in case file does not exist")
    void readI18nKeyNonExistingFile() {
        assertThrows(PrecompilationException.class,
                () -> MessageKeyPrecompiler.readI18nKeys(Paths.get("nonExistingFile")));
    }

    @Test
    @DisplayName("check java code generated by generateMessageKeysClass()")
    void generateMessageKeysClass() throws PrecompilationException {
        final String classCode = MessageKeyPrecompiler
                .generateMessageKeysClass(Paths.get(MessageKeyPrecompilerTest.PROPERTIES_FILE));

        assertTrue(classCode.contains("CAMEL_CASE_TAG"),
                "'CAMEL_CASE_TAG' not found in class generated by generateMessageKeysClass()");
        assertTrue(classCode.contains("UPPERCASE_TAG"),
                "'UPPERCASE_TAG' not found in class generated by generateMessageKeysClass()");
    }

    @Test
    @DisplayName("check if checkI18NFileExistence() succeeds in case provided path exists")
    void checkI18NFileExistenceSuccess() {
        try {
            MessageKeyPrecompiler.checkI18NFileExistence(Paths.get(MessageKeyPrecompilerTest.PROPERTIES_FILE));
        } catch (final PrecompilationException e) {
            fail("checkI18NFileExistence() has thrown exception PrecompilationException unexpectedly");
        }
    }

    @Test
    @DisplayName("check if checkI18NFileExistence() throws exception in case path does not exist")
    void checkI18NFileExistenceFail() {
        assertThrows(PrecompilationException.class,
                () -> MessageKeyPrecompiler.checkI18NFileExistence(Paths.get("non-existing-path")));
    }

    @Test
    @DisplayName("check if ensureTargetPathExists() throws exception in case targetParentPath in null")
    void ensureTargetPathExistsFailStage1() {
        assertThrows(PrecompilationException.class, () -> MessageKeyPrecompiler
                .ensureTargetPathExists(Paths.get(MessageKeyPrecompilerTest.PROPERTIES_FILE), null));
    }

    @Test
    @DisplayName("check if ensureTargetPathExists() throws exception in case targetParentPath cannot be created")
    void ensureTargetPathExistsFailStage2() {
        // mock targetParentPath
        final Path mockParentPath = mock(Path.class);
        final File mockFile = mock(File.class);
        when(mockParentPath.toFile()).thenReturn(mockFile);
        when(mockFile.exists()).thenReturn(false);
        when(mockFile.mkdirs()).thenReturn(false);

        assertThrows(PrecompilationException.class, () -> MessageKeyPrecompiler
                .ensureTargetPathExists(Paths.get(MessageKeyPrecompilerTest.PROPERTIES_FILE), mockParentPath));
    }

    @Test
    @DisplayName("check if ensureTargetPathExists() throws exception in case targetParentPath cannot be created")
    void ensureTargetPathExistsFailStage3() {
        // mock targetParentPath
        final Path mockParentPath = mock(Path.class);
        final File mockFile = mock(File.class);
        when(mockParentPath.toFile()).thenReturn(mockFile);
        when(mockFile.exists()).thenReturn(true);

        assertDoesNotThrow(() -> MessageKeyPrecompiler
                .ensureTargetPathExists(Paths.get(MessageKeyPrecompilerTest.PROPERTIES_FILE), mockParentPath));
    }

    @Test
    @DisplayName("check if ensureTargetPathExists() throws exception in case targetFolder is created")
    void ensureTargetPathExistsFailStage4() {
        // mock targetParentPath
        final Path mockParentPath = mock(Path.class);
        final File mockFile = mock(File.class);
        when(mockParentPath.toFile()).thenReturn(mockFile);
        when(mockFile.exists()).thenReturn(false);
        when(mockFile.mkdirs()).thenReturn(true);

        assertDoesNotThrow(() -> MessageKeyPrecompiler
                .ensureTargetPathExists(Paths.get(MessageKeyPrecompilerTest.PROPERTIES_FILE), mockParentPath));
    }
}
