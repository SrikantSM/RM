<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Resource Management" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="File Upload" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload skills via batch" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${filename}" elementType="HTTPFileArg">
                <stringProp name="File.path">${filename}</stringProp>
                <stringProp name="File.paramname">files</stringProp>
                <stringProp name="File.mimetype">text/csv</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">c4p-rm-test-qas-skill-srv.internal.cfapps.sap.hana.ondemand.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">FileUploadService</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Initialize random csv files" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.RandomUtils;


File myFile = File.createTempFile(&quot;upload-&quot;, &quot;&quot;);

		String csvHeader = &quot;conceptType,conceptUri,skillType,reuseLevel,preferredLabel,altLabels,description&quot;;
		StringJoiner csvString = new StringJoiner(System.lineSeparator(), &quot;&quot;, &quot;&quot;);
		csvString.add(csvHeader);
		for (int i = 0; i &lt; 2; i++) {
			String randomConceptType = &quot;KnowledgeSkillCompetence&quot;;
			String randomConceptUri = RandomStringUtils.randomAlphabetic(10);
			String randomSkillType = &quot;skill/competence&quot;;
			String randomReuseLevel = &quot;sector-specific&quot;;
			String randomPreferredLabel = RandomStringUtils.randomAlphabetic(10);
			String randomAlternativeLabel = &quot;\&quot;&quot; + RandomStringUtils.randomAlphabetic(10) + &quot;\&quot;&quot;;;
			String randomDescription =  &quot;\&quot;&quot; +RandomStringUtils.randomAlphabetic(10) + &quot;\&quot;&quot;;
			csvString.add(randomConceptType + &quot;,&quot; + randomConceptUri + &quot;,&quot;  + randomSkillType + &quot;,&quot; + randomReuseLevel + &quot;,&quot; +  randomPreferredLabel + &quot;,&quot; +  randomAlternativeLabel + &quot;,&quot; + randomDescription);
		}
		log.info(csvString.toString());
		FileUtils.writeStringToFile(myFile, csvString.toString(), &quot;UTF-8&quot; );

// Store file name in variable.
vars.put( &quot;filename&quot;, myFile.getCanonicalPath() );</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="tear down database" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.HttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.HttpResponse;

// Delete file and do not throw error
String responseData = ctx.getPreviousResult().getResponseDataAsString();
String regex = &quot;\&quot;\\$metadata#Skills\\/\\$entity\&quot;[\\s\\S\\n\\r]*?\&quot;ID\&quot;:\&quot;([^\&quot;]*)\&quot;[\\s\\S\\n\\r]*?Content-ID: 2&quot;;
Pattern pattern = Pattern.compile(regex);
Matcher matcher = pattern.matcher(responseData);
ArrayList ids = new ArrayList();
while (matcher.find()) {
	ids.add(matcher.group(1));
}

HttpClient httpClient = HttpClientBuilder.create().build();
for (int i = 0; i &lt; ids.size(); i++) {
	HttpDelete delete = new HttpDelete(
			&quot;https://c4p-rm-test-qas-skill-srv.internal.cfapps.sap.hana.ondemand.com/odata/v4/SkillService/Skills(ID=&quot; + ids.get(i) + &quot;,IsActiveEntity=true)&quot;);
	delete.setHeader(&quot;If-Match&quot;, &quot;*&quot;);
	HttpResponse response = httpClient.execute(delete);
}
FileUtils.deleteQuietly(new File(vars.get(&quot;filename&quot;)));

 </stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
